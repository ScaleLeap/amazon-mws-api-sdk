import { Codec, exactly, oneOf, optional, string } from 'purify-ts/Codec'

export const Error = Codec.interface({
  Type: string,
  Code: oneOf(
    ([
      'InputStreamDisconnected',
      'InvalidParameterValue',
      'AccessDenied',
      'InvalidAccessKeyId',
      'SignatureDoesNotMatch',
      'InvalidAddress',
      'InternalError',
      'Internal Error',
      'QuotaExceeded',
      'RequestThrottled',
      'ResourceNotFound',
      'ScheduledPackageAlreadyExists',
      'RegionNotSupported',
      'ScheduleWindowExpired',
      'InvalidOrderState',
      'PickupSlotNotAvailable',
      'AccessToFeedProcessingResultDenied',
      'ContentMD5Missing',
      'ContentMD5DoesNotMatch',
      'FeedCanceled',
      'FeedProcessingResultNoLongerAvailable',
      'FeedProcessingResultNotReady',
      'InputDataError',
      'InvalidFeedSubmissionId',
      'InvalidFeedType',
      'InvalidRequest',
      'NonRetriableInternalError',
      'RetriableInternalError',
      'AccessToReportDenied',
      'InvalidReportId',
      'InvalidReportType',
      'InvalidScheduleFrequency',
      'ReportNoLongerAvailable',
      'ReportNotReady',
      'DependencyFatalException',
      'DependencyRetriableException',
      'DependencyUnauthorizedException',
      'InternalErrorFatalException',
      'InvalidInputFatalException',
    ] as const).map((element) => exactly(element)),
  ),
  Message: string,
  Detail: optional(string),
})

export const MWSApiError = Codec.interface({
  ErrorResponse: Codec.interface({
    Error,
    RequestID: optional(string),
    RequestId: optional(string),
  }),
})
